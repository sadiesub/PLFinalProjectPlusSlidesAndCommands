
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '0E8AA234159EFCBDDDC1E06F0C775EE8'
    
_lr_action_items = {'QUOTE':([0,2,3,5,7,8,10,12,16,17,18,20,21,22,23,24,25,28,31,32,],[1,-18,-19,-22,-20,-17,-24,-23,1,-6,1,1,1,-12,-14,-13,-11,1,-7,-15,]),'BIN':([0,2,3,5,6,7,8,9,10,12,13,14,15,17,20,28,29,31,32,33,],[-21,-18,-19,-22,-4,-20,-17,-5,-24,-23,20,-3,-1,-6,-21,-21,20,-7,-15,20,]),'$end':([0,2,3,5,6,7,8,9,10,12,13,14,15,17,20,28,29,31,32,33,],[-21,-18,-19,-22,-4,-20,-17,-5,-24,-23,0,-3,-1,-6,-21,-21,-2,-7,-15,-16,]),'NUM':([0,2,3,5,7,8,10,11,12,16,17,18,20,21,22,23,24,25,28,31,32,],[3,-18,-19,-22,-20,-17,-24,3,-23,3,-6,3,3,3,-12,-14,-13,-11,3,-7,-15,]),'LPAREN':([0,1,2,3,5,7,8,10,12,16,17,18,20,21,22,23,24,25,28,31,32,],[4,16,-18,-19,-22,-20,-17,-24,-23,4,-6,4,4,4,-12,-14,-13,-11,4,-7,-15,]),'TRUE':([0,2,3,5,7,8,10,11,12,16,17,18,20,21,22,23,24,25,28,31,32,],[5,-18,-19,-22,-20,-17,-24,5,-23,5,-6,5,5,5,-12,-14,-13,-11,5,-7,-15,]),'TEXT':([0,2,3,5,7,8,10,11,12,16,17,18,20,21,22,23,24,25,28,31,32,],[7,-18,-19,-22,-20,-17,-24,7,-23,7,-6,7,7,7,-12,-14,-13,-11,7,-7,-15,]),'RPAREN':([2,3,5,7,8,10,12,16,17,18,21,22,23,24,25,26,27,30,31,32,],[-18,-19,-22,-20,-17,-24,-23,-10,-6,-10,-10,-12,-9,-13,-11,31,32,-8,-7,-15,]),'EQ':([2,3,5,7,8,10,11,12,19,],[-18,-19,-22,-20,-17,-24,-21,-23,28,]),'SIMB':([0,2,3,4,5,7,8,10,11,12,16,17,18,20,21,22,23,24,25,28,31,32,],[8,-18,-19,18,-22,-20,-17,-24,8,-23,8,-6,8,8,8,-12,-14,-13,-11,8,-7,-15,]),'NIL':([0,2,3,5,7,8,10,11,12,16,17,18,20,21,22,23,24,25,28,31,32,],[10,-18,-19,-22,-20,-17,-24,10,-23,10,-6,10,10,10,-12,-14,-13,-11,10,-7,-15,]),'LET':([0,20,28,],[11,11,11,]),'FALSE':([0,2,3,5,7,8,10,11,12,16,17,18,20,21,22,23,24,25,28,31,32,],[12,-18,-19,-22,-20,-17,-24,12,-23,12,-6,12,12,12,-12,-14,-13,-11,12,-7,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'item':([16,18,21,],[21,21,21,]),'bool':([0,11,16,18,20,21,28,],[2,2,2,2,2,2,2,]),'quoted_list':([0,16,18,20,21,28,],[6,22,22,6,22,6,]),'list':([1,],[17,]),'empty':([16,18,21,],[23,23,23,]),'call':([0,16,18,20,21,28,],[9,24,24,9,24,9,]),'exp':([0,20,28,],[13,29,33,]),'atom':([0,11,16,18,20,21,28,],[14,19,25,25,14,25,14,]),'items':([16,18,21,],[26,27,30,]),'binop':([0,20,28,],[15,15,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> exp","S'",1,None,None,None),
  ('exp -> binop','exp',1,'p_exp_binop','swift_yacc.py',132),
  ('binop -> exp BIN exp','binop',3,'p_binop','swift_yacc.py',137),
  ('exp -> atom','exp',1,'p_exp_atom','swift_yacc.py',143),
  ('exp -> quoted_list','exp',1,'p_exp_qlist','swift_yacc.py',149),
  ('exp -> call','exp',1,'p_exp_call','swift_yacc.py',154),
  ('quoted_list -> QUOTE list','quoted_list',2,'p_quoted_list','swift_yacc.py',159),
  ('list -> LPAREN items RPAREN','list',3,'p_list','swift_yacc.py',165),
  ('items -> item items','items',2,'p_items','swift_yacc.py',170),
  ('items -> empty','items',1,'p_items_empty','swift_yacc.py',175),
  ('empty -> <empty>','empty',0,'p_empty','swift_yacc.py',180),
  ('item -> atom','item',1,'p_item_atom','swift_yacc.py',185),
  ('item -> quoted_list','item',1,'p_item_list','swift_yacc.py',195),
  ('item -> call','item',1,'p_item_call','swift_yacc.py',200),
  ('item -> empty','item',1,'p_item_empty','swift_yacc.py',205),
  ('call -> LPAREN SIMB items RPAREN','call',4,'p_call','swift_yacc.py',210),
  ('exp -> LET atom EQ exp','exp',4,'p_let','swift_yacc.py',220),
  ('atom -> SIMB','atom',1,'p_atom_simbol','swift_yacc.py',232),
  ('atom -> bool','atom',1,'p_atom_bool','swift_yacc.py',237),
  ('atom -> NUM','atom',1,'p_atom_num','swift_yacc.py',242),
  ('atom -> TEXT','atom',1,'p_atom_word','swift_yacc.py',252),
  ('atom -> <empty>','atom',0,'p_atom_empty','swift_yacc.py',265),
  ('bool -> TRUE','bool',1,'p_true','swift_yacc.py',271),
  ('bool -> FALSE','bool',1,'p_false','swift_yacc.py',276),
  ('atom -> NIL','atom',1,'p_nil','swift_yacc.py',281),
]
